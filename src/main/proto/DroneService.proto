syntax = "proto3"; // No need to specify required or optional with proto3
package com.smartcitydrone.droneservice;

// Request payload
// No need to share drone battery level since we assume it's 100% when first joining network
message JoinRequest {
  // Each message attribute is strongly typed.
  // You also must assign a "tag" number.
  // Each tag number is unique within the message.
  int32 droneID = 1;
  string ipAddress = 2;
  int32 port = 3;
  int32 dronePositionX = 4;
  int32 dronePositionY = 5;
}

// Response received from the other drones already active inside the network
// The drone needs to know who is the master and its place inside the ring
// The drone may join during an election (master offline)
message JoinResponse {
  int32 droneID = 1;
  int32 dronePositionX = 2;
  int32 dronePositionY = 3;
  int32 batteryLevel = 4;
  bool isMaster = 5;
  bool isParticipant = 6;
}

message OrderRequest {
  string orderInfo = 1;
}

message OrderResponse {
  string droneAvailable = 1;
}

message StatRequest {
  int32 droneID = 1;
  string droneStat = 2;
}

message StatResponse {
  string masterResponse = 1;
}

message ElectionRequest {
  int32 batteryLevel = 1;
  int32 droneID = 2;
}

message ElectionResponse {
  string droneResponse = 1;
}

// Here we just need the ID since the battery is known to be the highest
message ElectedRequest {
  int32 droneID = 1;
}

message ElectedResponse {
  string droneResponse = 1;
}

// We need to know all of the updated drone properties along with pending stats (if any)
message PendingStatRequest {
  int32 droneID = 1;
  int32 dronePositionX = 2;
  int32 dronePositionY = 3;
  int32 batteryLevel = 4;
  bool isDelivering = 5;
  bool isCharging = 6;
  string droneStat = 7;
}

message PendingStatResponse {
  string masterResponse = 1;
}

// We can use this to check if a drone in network is still online
message CheckMessage {
  string message = 1;
}

message LookForMasterResponse {
  int32 droneID = 1;
  bool isMaster = 2;
  bool isParticipant = 3;
}

// Defining a Service, a Service can have multiple RPC operations
service DroneService {
  rpc joinNetwork(JoinRequest) returns (JoinResponse);
  rpc dispatchOrder(OrderRequest) returns (OrderResponse);
  rpc sendDroneStat(StatRequest) returns (StatResponse);
  rpc election(ElectionRequest) returns (ElectionResponse);
  rpc elected(ElectedRequest) returns (ElectedResponse);
  rpc sendPendingDroneStat(PendingStatRequest) returns (PendingStatResponse);
  rpc check(CheckMessage) returns (CheckMessage);
  rpc lookForMaster(CheckMessage) returns (LookForMasterResponse);
}